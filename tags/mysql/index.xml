<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Leftpocket的个人博客</title>
    <link>https://left-pocket.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on Leftpocket的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 04 Dec 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://left-pocket.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL对于千万级的大表要怎么优化？</title>
      <link>https://left-pocket.github.io/post/mysql/table/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/table/</guid>
      <description>背景 目前做电商后台开发，经历了数据从零到百万到百亿级别的增长。在这个增长的过程中，我们做了很多的优化。 这里分享一下我们的优化经验，仅供参考。</description>
    </item>
    
    <item>
      <title>后端面试之MySQL-InnoDB一颗B&#43;树可以存放多少行数据？</title>
      <link>https://left-pocket.github.io/post/mysql/innodb/</link>
      <pubDate>Thu, 02 Dec 2021 10:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/innodb/</guid>
      <description>背景 MySQL的InnoDB引擎一棵B+树可以存放多少行数据？这是一个很有趣的面试题。 也许你会猜1千万，2千万，或者上亿条数据？ 当你看完这篇</description>
    </item>
    
    <item>
      <title>后端面试之MySQL-什么是回表查询和覆盖索引</title>
      <link>https://left-pocket.github.io/post/mysql/covering_index/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/covering_index/</guid>
      <description>后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点呈现出来。 背景 关于回表查询，是MySQL里面一个非常重要的知识点。理解</description>
    </item>
    
    <item>
      <title>MySQL死锁的产生</title>
      <link>https://left-pocket.github.io/post/mysql/dead_lock/</link>
      <pubDate>Mon, 05 Apr 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/dead_lock/</guid>
      <description>背景 MySQL死锁问题涉及到MySQL一系列的基础知识，比如事务，隔离级别，各种锁类型，以及各种 SQL 语句的加锁原理。很多开发人员很少会遇到死锁</description>
    </item>
    
    <item>
      <title>TiDB Write Conflict问题分析</title>
      <link>https://left-pocket.github.io/post/mysql/db_tidb_write_conflict/</link>
      <pubDate>Thu, 06 Aug 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/db_tidb_write_conflict/</guid>
      <description>背景 我们线上使用TiDB来储存数据，最近DBA报告TiDB发生了write conflict. 1 2 3 4 5 [2020/08/2506:01:44.781+08:00][WARN][session.go:623][retrying][conn=26799778][schemaVersion=194][retryCnt=0][queryNum=0][sql=&amp;#34;UPDATE user_tab SET `region` = ?, `status` = ?, `update_time` = ? WHERE `from_userid` = ? AND `to_userid` = ? AND `type` = ? [arguments: (ID, 0,</description>
    </item>
    
  </channel>
</rss>
