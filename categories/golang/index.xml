<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 码农在新加坡的个人博客</title>
    <link>https://leftpocket.cn/categories/golang/</link>
    <description>Recent content in Golang on 码农在新加坡的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 May 2022 00:00:51 +0800</lastBuildDate><atom:link href="https://leftpocket.cn/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang time.After内存泄漏分析</title>
      <link>https://leftpocket.cn/post/golang/time_after/</link>
      <pubDate>Fri, 06 May 2022 00:00:51 +0800</pubDate>
      
      <guid>https://leftpocket.cn/post/golang/time_after/</guid>
      <description>原文地址：码农在新加坡的个人博客 背景 我刚转做go语言开发开始写入职小程序的时候，写下了如下的代码： 1 2 3 4 5 6 7 8 9 10 for { select { case conn := &amp;lt;- conns: ... //do</description>
    </item>
    
    <item>
      <title>一文看懂Go语言协程的设计与原理</title>
      <link>https://leftpocket.cn/post/golang/goroutine_implementation/</link>
      <pubDate>Sun, 18 Apr 2021 13:00:51 +0800</pubDate>
      
      <guid>https://leftpocket.cn/post/golang/goroutine_implementation/</guid>
      <description>原文地址：码农在新加坡的个人博客 背景 Go语言最大的特色就是从语言层面支持并发（Goroutine），Goroutine是Go中最基本的执行单</description>
    </item>
    
    <item>
      <title>Golang append是并发安全的吗</title>
      <link>https://leftpocket.cn/post/golang/append/</link>
      <pubDate>Sat, 20 Mar 2021 13:00:51 +0800</pubDate>
      
      <guid>https://leftpocket.cn/post/golang/append/</guid>
      <description>原文地址：码农在新加坡的个人博客 背景 最近开发的时候写了下面这段类似的代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func TestAppend() (result []int) { var wg sync.WaitGroup for i := 0; i &amp;lt; 100; i++ {</description>
    </item>
    
    <item>
      <title>Golang函数式选项(Functional Options)模式</title>
      <link>https://leftpocket.cn/post/golang/functional_options/</link>
      <pubDate>Thu, 18 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://leftpocket.cn/post/golang/functional_options/</guid>
      <description>原文地址：码农在新加坡的个人博客 概览 最近阅读源码的时候看到一段不错的代码，但是当时却不是非常理解为什么这么写。 我们先来看一下源代码： 1 2 3 4</description>
    </item>
    
    <item>
      <title>Golang装饰器(Decorator)设计模式</title>
      <link>https://leftpocket.cn/post/golang/decorator/</link>
      <pubDate>Thu, 18 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://leftpocket.cn/post/golang/decorator/</guid>
      <description>原文地址：码农在新加坡的个人博客 今天我们来介绍decorator这个经典的设计模式。 定义：装饰器模式主要对现有的类对象进行包裹和封装，以期望</description>
    </item>
    
  </channel>
</rss>
