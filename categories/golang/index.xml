<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Leftpocket的个人博客</title>
    <link>https://left-pocket.github.io/categories/golang/</link>
    <description>Recent content in Golang on Leftpocket的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 18 Apr 2021 13:00:51 +0800</lastBuildDate><atom:link href="https://left-pocket.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一文看懂Go语言协程的前世今生</title>
      <link>https://left-pocket.github.io/post/golang/goroutine_implementation/</link>
      <pubDate>Sun, 18 Apr 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/goroutine_implementation/</guid>
      <description>调度器的由来 单进程时代 早期的操作系统每个程序就是一个进程，但是操作系统在一段时间只能运行一个进程，直到这个进程运行完，才能运行下一个进程，这个时期可以成为单进程时代——串行时代。 如图：进程之间串行执行，A、B、C 三个进程按顺序执行。 单进程时代的两个问题： 单一执行流程、计算机只能一</description>
    </item>
    
    <item>
      <title>Golang append是并发安全的吗</title>
      <link>https://left-pocket.github.io/post/golang/append/</link>
      <pubDate>Sat, 20 Mar 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/append/</guid>
      <description>背景 最近开发的时候写了下面这段类似的代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func TestAppend() (result []int) { var wg sync.WaitGroup for i := 0; i &amp;lt; 100; i++ { v := i wg.Add(1) go func() { // other logic result = append(result, v) wg.Done() }() } wg.Wait() //fmt.Printf(&amp;#34;%v\n&amp;#34;, len(result)) return result } 就像这样，然后顺利通过测试到达生产环境。然后就出问题了。 预期情况下，len(result) = 100, 但是大多数情况下，这个数据会&amp;l</description>
    </item>
    
    <item>
      <title>Golang函数式选项(Functional Options)模式</title>
      <link>https://left-pocket.github.io/post/golang/functional_options/</link>
      <pubDate>Thu, 18 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/functional_options/</guid>
      <description>概览 最近阅读源码的时候看到一段不错的代码，但是当时却不是非常理解为什么这么写。 我们先来看一下源代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 type User struct { ID string Name string Age int Email string Phone string Gender string } type Option func(*User) func WithAge(age int) Option { return func(u *User) { u.Age = age</description>
    </item>
    
    <item>
      <title>Golang装饰器(Decorator)设计模式</title>
      <link>https://left-pocket.github.io/post/golang/decorator/</link>
      <pubDate>Thu, 18 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/decorator/</guid>
      <description>今天我们来介绍decorator这个经典的设计模式。 定义：装饰器模式主要对现有的类对象进行包裹和封装，以期望在不改变类对象及其类定义的情况下，为对象添加额外功能。是一种对象结构型模式。 Python装饰器模式 如果你熟悉Python，对装饰器模式应该不陌生。 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    
  </channel>
</rss>
