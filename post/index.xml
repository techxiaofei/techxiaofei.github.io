<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Leftpocket的个人博客</title>
    <link>https://left-pocket.github.io/post/</link>
    <description>Recent content in Posts on Leftpocket的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Nov 2021 13:00:51 +0800</lastBuildDate><atom:link href="https://left-pocket.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>博客分类</title>
      <link>https://left-pocket.github.io/post/catalog/golang_design_patterns/</link>
      <pubDate>Fri, 01 Jan 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/catalog/golang_design_patterns/</guid>
      <description>Golang 设计模式篇 Functional Options 函数式选项模式 [Decorator 装饰器模式]https://github.com） 系统设计篇</description>
    </item>
    
    <item>
      <title>服务端面试技术栈</title>
      <link>https://left-pocket.github.io/post/catalog/interview_tech_stack/</link>
      <pubDate>Fri, 01 Jan 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/catalog/interview_tech_stack/</guid>
      <description>网络编程篇 数据结构与算法篇 Redis篇 MySQL篇 Golang篇 设计模式篇 Kafka篇 C/C++篇 系统设计篇 Linux技术篇</description>
    </item>
    
    <item>
      <title>git rebase使用详解</title>
      <link>https://left-pocket.github.io/post/git/git_rebase/</link>
      <pubDate>Sat, 20 Nov 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/git/git_rebase/</guid>
      <description>背景 刚开始接触git的时候只会一些简单的指令，pull, add, commit, merge, push 等几个基础命令就可以了。但是经常使用git后，还是需要了解一些相对高端的常用</description>
    </item>
    
    <item>
      <title>goroutine的实现原理</title>
      <link>https://left-pocket.github.io/post/golang/goroutine_implementation/</link>
      <pubDate>Sun, 18 Apr 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/goroutine_implementation/</guid>
      <description>协程基础知识 1.Goroutine是Go语言的协程（Coroutine），Groutine从语言层面上实现了并发，和线程一样共享堆，不共享栈</description>
    </item>
    
    <item>
      <title>MySQL死锁的产生</title>
      <link>https://left-pocket.github.io/post/mysql/dead_lock/</link>
      <pubDate>Mon, 05 Apr 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/dead_lock/</guid>
      <description>背景 MySQL死锁问题涉及到MySQL一系列的基础知识，比如事务，隔离级别，各种锁类型，以及各种 SQL 语句的加锁原理。很多开发人员很少会遇到死锁</description>
    </item>
    
    <item>
      <title>Golang append是并发安全的吗</title>
      <link>https://left-pocket.github.io/post/golang/append/</link>
      <pubDate>Sat, 20 Mar 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/append/</guid>
      <description>背景 最近开发的时候写了下面这段类似的代码。 func TestAppend() (result []int) { var wg sync.WaitGroup for i := 0; i &amp;lt; 100; i++ { v := i wg.Add(1) go func() { // other logic result = append(result, v) wg.Done() }() } wg.Wait() //fmt.Printf(&amp;#34;%v\n&amp;#34;, len(result)) return result } 就像这样，然后顺利</description>
    </item>
    
    <item>
      <title>Golang函数式选项(Functional Options)编程模式</title>
      <link>https://left-pocket.github.io/post/golang/functional_options/</link>
      <pubDate>Thu, 18 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/functional_options/</guid>
      <description>概览 最近阅读源码的时候看到一段不错的代码，但是当时却不是非常理解为什么这么写。 我们先来看一下源代码： type Server struct { Addr string Port int Protocol string Timeout time.Duration MaxConns int } type Option func(*Server) func Protocol(p</description>
    </item>
    
    <item>
      <title>Golang装饰器(Decorator)设计模式</title>
      <link>https://left-pocket.github.io/post/golang/decorator/</link>
      <pubDate>Thu, 18 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/decorator/</guid>
      <description>今天我们来介绍decorator这个经典的设计模式。 定义：装饰器模式主要对现有的类对象进行包裹和封装，以期望在不改变类对象及其类定义的情况下</description>
    </item>
    
    <item>
      <title>Redis SDS简单动态字符串</title>
      <link>https://left-pocket.github.io/post/redis/redis_sds/</link>
      <pubDate>Wed, 17 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/redis/redis_sds/</guid>
      <description>SDS （Simple Dynamic String，简单动态字符串）是 Redis 底层所使用的字符串表示， 几乎所有的 Redis 模块中都用了 sds。 本章将对 SDS 的实现、性能和功能等方</description>
    </item>
    
    <item>
      <title>布隆过滤器(Bloom Filter)详解</title>
      <link>https://left-pocket.github.io/post/algorithm/bloom_filter/</link>
      <pubDate>Wed, 03 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/algorithm/bloom_filter/</guid>
      <description>布隆过滤器是什么 本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入</description>
    </item>
    
    <item>
      <title>朋友圈技术设计与实现</title>
      <link>https://left-pocket.github.io/post/system_design/friends_status/</link>
      <pubDate>Fri, 22 Jan 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/friends_status/</guid>
      <description>最近在产品上实现了微信朋友圈的功能，在这里分享一下朋友圈功能的设计与实现。 下一篇文章将讲解朋友圈状态的评论和点赞功能的设计与实现。</description>
    </item>
    
    <item>
      <title>点赞和评论 技术设计与实现</title>
      <link>https://left-pocket.github.io/post/system_design/friends_comment_like/</link>
      <pubDate>Fri, 22 Jan 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/friends_comment_like/</guid>
      <description>上篇文章介绍了朋友圈的技术设计，这篇将介绍朋友圈点赞和评论的实现方式。 需求介绍 对某条状态实现点赞与取消点赞的功能。 点赞列表按时间从小到大排序</description>
    </item>
    
    <item>
      <title>vscode配置leetcode插件</title>
      <link>https://left-pocket.github.io/post/vscode-leetcode/</link>
      <pubDate>Sat, 12 Dec 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/vscode-leetcode/</guid>
      <description>作为一名合格的程序猿，大家找工作的时候经常需要刷leetcode, leetcode官网上面写代码没有IDE上面写代码那么方便，更重要的是，可</description>
    </item>
    
    <item>
      <title>Redis Zset的精度问题分析及解决方案</title>
      <link>https://left-pocket.github.io/post/redis/redis-zset-score/</link>
      <pubDate>Fri, 04 Dec 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/redis/redis-zset-score/</guid>
      <description>背景 最近使用Redis的SortedSet，使用int64作为score时遇到了一些预料之外的情况，在此总结一下。 介绍 项目中采用Redis S</description>
    </item>
    
    <item>
      <title>snowflake算法及最佳实践</title>
      <link>https://left-pocket.github.io/post/snowflake/</link>
      <pubDate>Tue, 24 Nov 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/snowflake/</guid>
      <description>背景 这篇文章来讲解snowflake是什么，以及它实际应用的最佳实践方案。 snowflake算法 什么是 Snowflake Twitter的snowflake分</description>
    </item>
    
    <item>
      <title>分布式ID生成方案</title>
      <link>https://left-pocket.github.io/post/system_design/uid-generator/</link>
      <pubDate>Sat, 21 Nov 2020 00:07:57 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/uid-generator/</guid>
      <description>背景 在互联网的业务系统中，涉及到各种各样的ID，这些ID需要保证全局唯一。那一般生成ID都有哪些解决方案呢？特别是在复杂的分布式系统业务场景</description>
    </item>
    
    <item>
      <title>Centos7安装SSR教程</title>
      <link>https://left-pocket.github.io/post/ssr-centos7/</link>
      <pubDate>Thu, 06 Aug 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/ssr-centos7/</guid>
      <description>记录一下在centos7下安装ssr(shadowsocksr)的教程。 安装必要依赖包 yum install git -y yum install epel-release -y yum install libsodium -y yum install epel-release -y yum install libsodium -y 下载shado</description>
    </item>
    
    <item>
      <title>TiDB Write Conflict问题分析</title>
      <link>https://left-pocket.github.io/post/db-tidb-write-conflict/</link>
      <pubDate>Thu, 06 Aug 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/db-tidb-write-conflict/</guid>
      <description>背景 我们线上使用TiDB来储存数据，最近DBA报告TiDB发生了write conflict. [2020/08/25 06:01:44.781 +08:00] [WARN] [session.go:623] [retrying] [conn=26799778] [schemaVersion=194] [retryCnt=0] [queryNum=0] [sql=&amp;quot;UPDATE user_tab SET `region` = ?, `status` = ?, `update_time` = ? WHERE `from_userid` = ? AND `to_userid` = ? AND `type`</description>
    </item>
    
    <item>
      <title>使用hugo搭建个人博客</title>
      <link>https://left-pocket.github.io/post/hugo/hugo-creation/</link>
      <pubDate>Thu, 06 Aug 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo-creation/</guid>
      <description>最近使用hugo搭建博客，准备自己记录一下学习过程。 就先记录一下搭建hugo博客的流程。 本篇记录一下怎么在本机电脑成功运行hugo生成静态博</description>
    </item>
    
    <item>
      <title>把hugo博客托管到github上</title>
      <link>https://left-pocket.github.io/post/hugo/hugo-github/</link>
      <pubDate>Thu, 06 Aug 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo-github/</guid>
      <description>上一篇介绍了怎么在本机搭建hugo博客，这一篇将主要介绍怎么把hugo静态博客托管到github上。 创建Github Pages 假设你需要部署在 GitHub Pages 上</description>
    </item>
    
    <item>
      <title></title>
      <link>https://left-pocket.github.io/post/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://left-pocket.github.io/post/interview/</guid>
      <description>一 数据结构与算法 二 C++&amp;amp;C++11 三 Golang 四 Redis 五 MySQL 六 Linux 七 系统设计 秒杀系统设计</description>
    </item>
    
    <item>
      <title></title>
      <link>https://left-pocket.github.io/post/system_design/unique_node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/unique_node/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
