<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Leftpocket的个人博客</title>
    <link>https://left-pocket.github.io/post/</link>
    <description>Recent content in Posts on Leftpocket的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 26 Nov 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://left-pocket.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>后端面试之MySQL-什么是回表查询和覆盖索引</title>
      <link>https://left-pocket.github.io/post/mysql/covering_index/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/covering_index/</guid>
      <description>原文地址：https://left-pocket.github.io 后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点呈</description>
    </item>
    
    <item>
      <title>后端面试之MySQL</title>
      <link>https://left-pocket.github.io/post/interview/mysql/</link>
      <pubDate>Thu, 25 Nov 2021 00:03:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/interview/mysql/</guid>
      <description>​ 原文地址：https://left-pocket.github.io 后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点</description>
    </item>
    
    <item>
      <title>后端面试之网络编程</title>
      <link>https://left-pocket.github.io/post/interview/tcpip/</link>
      <pubDate>Thu, 25 Nov 2021 00:01:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/interview/tcpip/</guid>
      <description>​ 原文地址：https://left-pocket.github.io 后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点</description>
    </item>
    
    <item>
      <title>后端面试之网络编程-socket可读可写条件</title>
      <link>https://left-pocket.github.io/post/tcpip/socket_read_write/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/tcpip/socket_read_write/</guid>
      <description>​ 原文地址：https://left-pocket.github.io 后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点</description>
    </item>
    
    <item>
      <title>LRU缓存机制，你想知道的这里都有</title>
      <link>https://left-pocket.github.io/post/system_design/lru/</link>
      <pubDate>Tue, 23 Nov 2021 18:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/lru/</guid>
      <description>​​ 原文地址：https://left-pocket.github.io 概述 LRU是Least Recently Used的缩写，译为最近最少使用。它的理论基</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（五）- 申请免费域名并绑定到个人博客</title>
      <link>https://left-pocket.github.io/post/hugo/hugo_dns/</link>
      <pubDate>Tue, 23 Nov 2021 01:03:59 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo_dns/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（四）- hugo自动部署到vercel</title>
      <link>https://left-pocket.github.io/post/hugo/hugo_vercel/</link>
      <pubDate>Tue, 23 Nov 2021 01:02:59 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo_vercel/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（三）- hugo高级配置，让博客更亮眼</title>
      <link>https://left-pocket.github.io/post/hugo/hugo_advanced/</link>
      <pubDate>Tue, 23 Nov 2021 01:01:59 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo_advanced/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（二）- 把hugo博客托管到github上</title>
      <link>https://left-pocket.github.io/post/hugo/hugo_github/</link>
      <pubDate>Tue, 23 Nov 2021 01:00:59 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo_github/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（一）- 使用hugo搭建个人博客</title>
      <link>https://left-pocket.github.io/post/hugo/hugo_creation/</link>
      <pubDate>Tue, 23 Nov 2021 01:00:55 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo_creation/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（零）- 序章</title>
      <link>https://left-pocket.github.io/post/hugo/hugo_0/</link>
      <pubDate>Tue, 23 Nov 2021 01:00:50 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo_0/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多</description>
    </item>
    
    <item>
      <title>do{...}while(0)的用法</title>
      <link>https://left-pocket.github.io/post/cpp/do_while/</link>
      <pubDate>Mon, 22 Nov 2021 15:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/cpp/do_while/</guid>
      <description>​​ 原文地址：https://left-pocket.github.io 零.导引 第一次见到 do{...}while(0) 是在学习 libevent 的时候，看到里面有很多类似 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>c&#43;&#43;中static的用法详解</title>
      <link>https://left-pocket.github.io/post/cpp/static/</link>
      <pubDate>Mon, 22 Nov 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/cpp/static/</guid>
      <description>​ 原文地址：https://left-pocket.github.io 背景 static 是 C/C++ 中很常用的修饰符，它被用来控制变量的存储方式和可见性。而 static 在</description>
    </item>
    
    <item>
      <title>手游服务器开发技术详解</title>
      <link>https://left-pocket.github.io/post/backend/game_development/</link>
      <pubDate>Sun, 21 Nov 2021 14:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/backend/game_development/</guid>
      <description>原文地址：https://left-pocket.github.io 回顾我的码农生涯，在做互联网电商后端开发之前做过大概6年的游戏后端开发，</description>
    </item>
    
    <item>
      <title>二级指针的作用详解</title>
      <link>https://left-pocket.github.io/post/cpp/secondary_pointer/</link>
      <pubDate>Sun, 21 Nov 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/cpp/secondary_pointer/</guid>
      <description>原文地址：https://left-pocket.github.io ​ 一、概念 在如下的A指向B、B指向C的指向关系中： 首先 C是&amp;quot;一</description>
    </item>
    
    <item>
      <title>git rebase使用详解</title>
      <link>https://left-pocket.github.io/post/git/git_rebase/</link>
      <pubDate>Sat, 20 Nov 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/git/git_rebase/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 刚开始接触git的时候只会一些简单的指令，pull, add, commit, merge, push 等几个基</description>
    </item>
    
    <item>
      <title>goroutine的实现原理</title>
      <link>https://left-pocket.github.io/post/golang/goroutine_implementation/</link>
      <pubDate>Sun, 18 Apr 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/goroutine_implementation/</guid>
      <description>原文地址：https://left-pocket.github.io/ 协程基础知识 1.Goroutine是Go语言的协程（Coroutine</description>
    </item>
    
    <item>
      <title>MySQL死锁的产生</title>
      <link>https://left-pocket.github.io/post/mysql/dead_lock/</link>
      <pubDate>Mon, 05 Apr 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/dead_lock/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 MySQL死锁问题涉及到MySQL一系列的基础知识，比如事务，隔离级</description>
    </item>
    
    <item>
      <title>Golang append是并发安全的吗</title>
      <link>https://left-pocket.github.io/post/golang/append/</link>
      <pubDate>Sat, 20 Mar 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/append/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 最近开发的时候写了下面这段类似的代码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>Golang函数式选项(Functional Options)模式</title>
      <link>https://left-pocket.github.io/post/golang/functional_options/</link>
      <pubDate>Thu, 18 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/functional_options/</guid>
      <description>原文地址：https://left-pocket.github.io 概览 最近阅读源码的时候看到一段不错的代码，但是当时却不是非常理解为什么这</description>
    </item>
    
    <item>
      <title>Golang装饰器(Decorator)设计模式</title>
      <link>https://left-pocket.github.io/post/golang/decorator/</link>
      <pubDate>Thu, 18 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/golang/decorator/</guid>
      <description>原文地址：https://left-pocket.github.io 今天我们来介绍decorator这个经典的设计模式。 定义：装饰器模式主要</description>
    </item>
    
    <item>
      <title>Redis SDS简单动态字符串</title>
      <link>https://left-pocket.github.io/post/redis/redis_sds/</link>
      <pubDate>Wed, 17 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/redis/redis_sds/</guid>
      <description>原文地址：https://left-pocket.github.io/ SDS （Simple Dynamic String，简单动态字符串）是 Redis 底层所使用的字符串</description>
    </item>
    
    <item>
      <title>布隆过滤器(Bloom Filter)详解</title>
      <link>https://left-pocket.github.io/post/system_design/bloom_filter/</link>
      <pubDate>Wed, 03 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/bloom_filter/</guid>
      <description>原文地址：https://left-pocket.github.io 布隆过滤器是什么 本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构</description>
    </item>
    
    <item>
      <title>朋友圈技术设计与实现</title>
      <link>https://left-pocket.github.io/post/system_design/friends_status/</link>
      <pubDate>Fri, 22 Jan 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/friends_status/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 最近实现了一个功能，类似于微信的朋友圈，以及点赞评论，我将分两篇介绍</description>
    </item>
    
    <item>
      <title>点赞和评论 技术设计与实现</title>
      <link>https://left-pocket.github.io/post/system_design/friends_comment_like/</link>
      <pubDate>Fri, 22 Jan 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/friends_comment_like/</guid>
      <description>原文地址：https://left-pocket.github.io 上篇文章介绍了朋友圈的技术设计，这篇将介绍朋友圈点赞和评论的实现方式。 需</description>
    </item>
    
    <item>
      <title>vscode配置leetcode插件</title>
      <link>https://left-pocket.github.io/post/others/vscode_leetcode/</link>
      <pubDate>Sat, 12 Dec 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/others/vscode_leetcode/</guid>
      <description>原文地址：https://left-pocket.github.io 作为一名合格的程序猿，大家找工作的时候经常需要刷leetcode, lee</description>
    </item>
    
    <item>
      <title>Redis Zset的精度问题分析及解决方案</title>
      <link>https://left-pocket.github.io/post/redis/redis_zset_score/</link>
      <pubDate>Fri, 04 Dec 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/redis/redis_zset_score/</guid>
      <description>原文地址：https://left-pocket.github.io/ 背景 最近使用Redis的SortedSet，使用int64作为scor</description>
    </item>
    
    <item>
      <title>分布式ID生成方案-snowflake算法</title>
      <link>https://left-pocket.github.io/post/system_design/snowflake/</link>
      <pubDate>Tue, 24 Nov 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/snowflake/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 在互联网的业务系统中，涉及到各种各样的ID，这些ID需要保证全局唯一</description>
    </item>
    
    <item>
      <title>Centos7安装SSR教程</title>
      <link>https://left-pocket.github.io/post/others/ssr_centos7/</link>
      <pubDate>Thu, 06 Aug 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/others/ssr_centos7/</guid>
      <description>原文地址：https://left-pocket.github.io 记录一下在centos7下安装ssr(shadowsocksr)的教程。</description>
    </item>
    
    <item>
      <title>TiDB Write Conflict问题分析</title>
      <link>https://left-pocket.github.io/post/mysql/db_tidb_write_conflict/</link>
      <pubDate>Thu, 06 Aug 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/db_tidb_write_conflict/</guid>
      <description>原文地址：https://left-pocket.github.io 背景 我们线上使用TiDB来储存数据，最近DBA报告TiDB发生了writ</description>
    </item>
    
  </channel>
</rss>
