<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on Leftpocket的个人博客</title>
    <link>https://left-pocket.github.io/categories/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on Leftpocket的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 23 Dec 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://left-pocket.github.io/categories/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>后端面试之系统设计-短网址（Short URL）服务怎么设计？</title>
      <link>https://left-pocket.github.io/post/system_design/short_url/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/short_url/</guid>
      <description>​ 背景 短网址（short url），就是将长网址缩短为一个很短的网址，用户访问这个短网址可以重定向到原本的长网址（还原）。 可能你会问了，短链接有哪些使用场景呢？ 事实上你一定见到过短网址，比如短信里面的网址，微博里面的链接。 短网址可以减少文本字数，隐藏链接参数等，有利于短信推广的作用</description>
    </item>
    
    <item>
      <title>后端面试之网络编程-close和shutdown的区别</title>
      <link>https://left-pocket.github.io/post/tcpip/close_shutdown/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:02 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/tcpip/close_shutdown/</guid>
      <description>​ 后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点呈现出来。 shutdown()函数可以选择关闭全双工连接的读通道或者写通道，如果两个通道同时关闭，则这个连接不能再继续通信。close()函数会同时关闭全双工连接的读写通道，除了关闭连接外，还会释放套接字占用</description>
    </item>
    
    <item>
      <title>后端面试之网络编程-socket返回可读，read返回0是什么情况？</title>
      <link>https://left-pocket.github.io/post/tcpip/socket_read_write/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/tcpip/socket_read_write/</guid>
      <description>​ 后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点呈现出来。 结论 如果面试官问你，如果一个socket返回可读，read返回0是什么情况？ 其实这是一个很简单的问题，它就是考察socket的可读可写条件这个知识点。 面试官也可能直接问你：socket的可读可写条件</description>
    </item>
    
    <item>
      <title>后端面试之-分布式锁的几种实现方式</title>
      <link>https://left-pocket.github.io/post/system_design/distributed_lock/</link>
      <pubDate>Wed, 03 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/distributed_lock/</guid>
      <description>分布式锁一般有三种实现方式： 数据库乐观锁； 基于Redis的分布式锁； 基于ZooKeeper的分布式锁； 数据库 排它锁 实现方式： 获取锁可以通过，在select语句后增加for update，数据库会在查询过程中给数据库表增加排他锁。当某条记录被加上排他锁之后，其他线程无法再在该行记录上</description>
    </item>
    
  </channel>
</rss>
