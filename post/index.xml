<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Leftpocket的个人博客</title>
    <link>https://left-pocket.github.io/post/</link>
    <description>Recent content in Posts on Leftpocket的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 01 Jan 2022 00:00:02 +0800</lastBuildDate><atom:link href="https://left-pocket.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KCP传输协议，快速可靠的UDP，和TCP比有什么优势？</title>
      <link>https://left-pocket.github.io/post/tcpip/kcp/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:02 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/tcpip/kcp/</guid>
      <description>​ 背景 可能你从来没有听说过KCP是什么，但是你肯定知道TCP和UDP。 这里我们通过KCP来剖析TCP和UDP的区别是什么，并理解为什么有了TCP还需要KCP，以及KCP/UDP具体的使用场景。 KCP是什么 我们都知道： TCP保证数据准确交付，UDP保证数据快速到达，KCP则是两种协</description>
    </item>
    
    <item>
      <title>后端面试之系统设计-短网址（Short URL）服务怎么设计？</title>
      <link>https://left-pocket.github.io/post/system_design/short_url/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/short_url/</guid>
      <description>​ 背景 短网址（short url），就是将长网址缩短为一个很短的网址，用户访问这个短网址可以重定向到原本的长网址（还原）。 可能你会问了，短链接有哪些使用场景呢？ 事实上你一定见到过短网址，比如短信里面的网址，微博里面的链接。 短网址可以减少文本字数，隐藏链接参数等，有利于短信推广的作用</description>
    </item>
    
    <item>
      <title>从零开始搭建个人博客（三）- hugo高级配置，让博客更亮眼</title>
      <link>https://left-pocket.github.io/post/hugo/hugo_advanced/</link>
      <pubDate>Thu, 02 Dec 2021 01:02:55 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/hugo/hugo_advanced/</guid>
      <description>背景 使用个人博客也有一年多的时间，这一年多的时候踩了很多坑，也学到了很多知识。 这里分享一个系列教程：从零开始搭建个人博客，把我的经验分享在这里。 系列地址：https://left-pocket.github.io 从零开始搭建个人博客（三）- hugo高级配置，让你的博客更亮眼 当前我</description>
    </item>
    
    <item>
      <title>后端面试之网络编程-close和shutdown的区别</title>
      <link>https://left-pocket.github.io/post/tcpip/close_shutdown/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:02 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/tcpip/close_shutdown/</guid>
      <description>​ 后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点呈现出来。 shutdown()函数可以选择关闭全双工连接的读通道或者写通道，如果两个通道同时关闭，则这个连接不能再继续通信。close()函数会同时关闭全双工连接的读写通道，除了关闭连接外，还会释放套接字占用</description>
    </item>
    
    <item>
      <title>后端面试之网络编程-socket返回可读，read返回0是什么情况？</title>
      <link>https://left-pocket.github.io/post/tcpip/socket_read_write/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/tcpip/socket_read_write/</guid>
      <description>​ 后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点呈现出来。 结论 如果面试官问你，如果一个socket返回可读，read返回0是什么情况？ 其实这是一个很简单的问题，它就是考察socket的可读可写条件这个知识点。 面试官也可能直接问你：socket的可读可写条件</description>
    </item>
    
    <item>
      <title>LRU缓存机制，你想知道的这里都有</title>
      <link>https://left-pocket.github.io/post/system_design/lru/</link>
      <pubDate>Tue, 23 Nov 2021 18:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/lru/</guid>
      <description>​​ 概述 LRU是Least Recently Used的缩写，译为最近最少使用。它的理论基础为 “最近使用的数据会在未来一段时期内仍然被使用，已经很久没有使用的数据大概率在未来很长一段时间仍然不会被使用” 由于该思想非常契合业务场景 ，并且可以解决很多实际开发中的问题，所以我们经常通过LRU的思想来作缓</description>
    </item>
    
    <item>
      <title>do{...}while(0)的用法</title>
      <link>https://left-pocket.github.io/post/cpp/do_while/</link>
      <pubDate>Mon, 22 Nov 2021 15:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/cpp/do_while/</guid>
      <description>​​ 零.导引 第一次见到 do{...}while(0) 是在学习 libevent 的时候，看到里面有很多类似 1 2 3 4 5 6 7 #define TT_URI(want) do { \ char *ret = evhttp_uri_join(uri, url_tmp, sizeof(url_tmp)); \ tt_want(ret != NULL); \ tt_want(ret == url_tmp); \ if (strcmp(ret,want) != 0) \ TT_FAIL((&amp;#34;\&amp;#34;%s\&amp;#34; != \&amp;#34;%s\&amp;#34;&amp;#34;,ret,want)); \ } while(0) 当时特别疑惑，do{...}while() 不是做循环的吗，类似 for,while 的语法，不过现实开发中，用 for 和 while 的比较多，do{...}while() 比较少了，</description>
    </item>
    
    <item>
      <title>c&#43;&#43;中static的用法详解</title>
      <link>https://left-pocket.github.io/post/cpp/static/</link>
      <pubDate>Mon, 22 Nov 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/cpp/static/</guid>
      <description>​ 背景 static 是 C/C++ 中很常用的修饰符，它被用来控制变量的存储方式和可见性。而 static 在 C 语言和 C++ 语言中各有多个用途，下面我就分类讲解： C语言中static的三种用途 C++语言中static的两种用途 C语言中static的用法 C 语言的 static 关键字有三种（具体来说是两种）用途： 1. 静态局部变量 用于函数体</description>
    </item>
    
    <item>
      <title>手游服务器开发技术详解</title>
      <link>https://left-pocket.github.io/post/backend/game_development/</link>
      <pubDate>Sun, 21 Nov 2021 14:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/backend/game_development/</guid>
      <description>回顾我的码农生涯，在做互联网电商后端开发之前做过大概6年的游戏后端开发，想总结一下手游后端开发技术的方方面面。 之前从事游戏服务器开发期间参与了不少项目，学到了很多游戏服务器开发技术，参与过几个不同架构的服务器开发，就此聊聊游戏服务器开发需要的技术，给刚进入游戏后端开发的同学一些指</description>
    </item>
    
    <item>
      <title>二级指针的作用详解</title>
      <link>https://left-pocket.github.io/post/cpp/secondary_pointer/</link>
      <pubDate>Sun, 21 Nov 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/cpp/secondary_pointer/</guid>
      <description>一、概念 在如下的A指向B、B指向C的指向关系中： 首先 C是&amp;quot;一段内容&amp;quot;,比如你用malloc或者new分配了一块内存，然后塞进去&amp;quot;一段内容&amp;quot;,那就是C了。C的起始地址是 0x00000008。 B是一个指针变量,其中存放着C的地址，但是B也要占空</description>
    </item>
    
    <item>
      <title>5分钟搞懂布隆过滤器，掌握亿级数据过滤算法</title>
      <link>https://left-pocket.github.io/post/system_design/bloom_filter/</link>
      <pubDate>Wed, 03 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/bloom_filter/</guid>
      <description>布隆过滤器是什么 本质上布隆过滤器(Bloom Filter)是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 某样东西一定不存在或者可能存在。 相比于传统的 List、Set、Map 等数据结构，它更高效、占</description>
    </item>
    
    <item>
      <title>后端面试之-分布式锁的几种实现方式</title>
      <link>https://left-pocket.github.io/post/system_design/distributed_lock/</link>
      <pubDate>Wed, 03 Feb 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/distributed_lock/</guid>
      <description>分布式锁一般有三种实现方式： 数据库乐观锁； 基于Redis的分布式锁； 基于ZooKeeper的分布式锁； 数据库 排它锁 实现方式： 获取锁可以通过，在select语句后增加for update，数据库会在查询过程中给数据库表增加排他锁。当某条记录被加上排他锁之后，其他线程无法再在该行记录上</description>
    </item>
    
    <item>
      <title>分布式ID生成方案-snowflake算法</title>
      <link>https://left-pocket.github.io/post/system_design/snowflake/</link>
      <pubDate>Tue, 24 Nov 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/system_design/snowflake/</guid>
      <description>背景 在互联网的业务系统中，涉及到各种各样的ID，这些ID需要保证全局唯一。我们称之为分布式ID，分布式ID需要满足 唯一性、趋势递增性、高可用性、高性能等特点。 snowflake算法，也叫雪花算法，是其中的一种分布式ID生成方案。是twitter公司内部分布式项目采用的ID生成算法</description>
    </item>
    
  </channel>
</rss>
