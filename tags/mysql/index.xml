<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Leftpocket的个人博客</title>
    <link>https://left-pocket.github.io/tags/MySQL/</link>
    <description>Recent content in MySQL on Leftpocket的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Dec 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://left-pocket.github.io/tags/MySQL/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL对于千万级的大表要怎么优化？</title>
      <link>https://left-pocket.github.io/post/mysql/table/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/table/</guid>
      <description>背景 目前做电商后台开发，经历了数据从零到百万到百亿级别的增长。在这个增长的过程中，我们做了很多的优化。 这里分享一下我们的优化经验，仅供参考。 优化策略： 不要过度优化，优化的过程一定是跟随着业务量的增长来慢慢调整优化策略的，比如说，没人就在一开始数据为0的时候就开始畅想10亿的数据的</description>
    </item>
    
    <item>
      <title>后端面试之MySQL-InnoDB一颗B&#43;树可以存放多少行数据？</title>
      <link>https://left-pocket.github.io/post/mysql/innodb/</link>
      <pubDate>Thu, 02 Dec 2021 10:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/innodb/</guid>
      <description>背景 MySQL的InnoDB引擎一棵B+树可以存放多少行数据？这是一个很有趣的面试题。 也许你会猜1千万，2千万，或者上亿条数据？ 当你看完这篇文章，你就心中有数了。 最重要的是，这篇文章能让你更深入的理解InnoDB的B+树索引的方方面面。 看完这篇文章，你可以同时回答以下几个关于In</description>
    </item>
    
    <item>
      <title>后端面试之MySQL-什么是回表查询和覆盖索引</title>
      <link>https://left-pocket.github.io/post/mysql/covering_index/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/covering_index/</guid>
      <description>后端面试系列将剖析后端面试中常考技术点，用尽量短的篇幅把一个一个技术点呈现出来。 背景 关于回表查询，是MySQL里面一个非常重要的知识点。理解回表查询，让你在实际项目中操作数据库的时候会有更好的性能考虑。 回表查询也是我面试必考的一个基础知识。 什么是回表查询？ 这先要从InnoDB的索</description>
    </item>
    
    <item>
      <title>MySQL死锁的产生</title>
      <link>https://left-pocket.github.io/post/mysql/dead_lock/</link>
      <pubDate>Mon, 05 Apr 2021 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/dead_lock/</guid>
      <description>背景 MySQL死锁问题涉及到MySQL一系列的基础知识，比如事务，隔离级别，各种锁类型，以及各种 SQL 语句的加锁原理。很多开发人员很少会遇到死锁的问题。但是死锁却是一个很考验MySQL基本功的技术点。 这篇文章我们就从零分析死锁的方方面面。 基础知识 隔离级别 首先，我们需要了解MySQL I</description>
    </item>
    
    <item>
      <title>TiDB Write Conflict问题分析</title>
      <link>https://left-pocket.github.io/post/mysql/db_tidb_write_conflict/</link>
      <pubDate>Thu, 06 Aug 2020 13:00:51 +0800</pubDate>
      
      <guid>https://left-pocket.github.io/post/mysql/db_tidb_write_conflict/</guid>
      <description>背景 我们线上使用TiDB来储存数据，最近DBA报告TiDB发生了write conflict. [2020/08/25 06:01:44.781 +08:00] [WARN] [session.go:623] [retrying] [conn=26799778] [schemaVersion=194] [retryCnt=0] [queryNum=0] [sql=&amp;quot;UPDATE user_tab SET `region` = ?, `status` = ?, `update_time` = ? WHERE `from_userid` = ? AND `to_userid` = ? AND `type` = ? [arguments: (ID, 0, 1598306504, 118049824, 8572364, 1)]&amp;quot;] [2020/08/25 06:01:44.782 +08:00] [WARN] [session.go:644] [&amp;quot;transaction association&amp;quot;] [conn=26799778] [&amp;quot;retrying txnStartTS&amp;quot;=418986460378563450] [&amp;quot;original txnStartTS&amp;quot;=418986460352348716] [2020/08/25 06:01:44.783 +08:00] [INFO] [2pc.go:1104] [&amp;quot;2PC clean up done&amp;quot;] [conn=26799778] [txnStartTS=418986460352348716] [2020/08/25 06:01:45.612 +08:00] [WARN] [client_batch.go:577] [&amp;quot;send request is cancelled&amp;quot;] [to=10.65.234.201:20160] [cause=&amp;quot;context canceled&amp;quot;] [2020/08/25 06:01:45.612 +08:00] [WARN] [session.go:425] [sql] [conn=26799680] [label=general] [error=&amp;quot;[kv:9007]Write conflict, txnStartTS=418986459434844923, conflictStartTS=418986459434844925, conflictCommitTS=418986460457205920, key={tableID=89, handle=8646911292299313507} primary={tableID=89, handle=1729382264526793474} [try again later]&amp;quot;] [txn=&amp;quot;Txn{state=invalid}&amp;quot;] 以下就针对</description>
    </item>
    
  </channel>
</rss>
